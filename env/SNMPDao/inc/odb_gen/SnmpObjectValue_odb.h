// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef SNMP_OBJECT_VALUE_ODB_H
#define SNMP_OBJECT_VALUE_ODB_H

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/mysql/gregorian-traits.hxx>
#include <odb/boost/date-time/mysql/posix-time-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
#include <odb/boost/uuid/mysql/uuid-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "SnmpObjectValue.hpp"

#include "MonitorHistory_odb.h"
#include "SnmpObject_odb.h"
#include "SnmpObjectType_odb.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // SnmpObjectValue
  //
  template <>
  struct class_traits< ::SnmpObjectValue >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::SnmpObjectValue >
  {
    public:
    typedef ::SnmpObjectValue object_type;
    typedef ::std::shared_ptr< ::SnmpObjectValue > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // SnmpObjectValue
  //
  template <typename A>
  struct pointer_query_columns< ::SnmpObjectValue, id_mysql, A >
  {
    // snmpObjectValueId
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    snmpObjectValueId_type_;

    static const snmpObjectValueId_type_ snmpObjectValueId;

    // value
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    value_type_;

    static const value_type_ value;

    // snmpObject
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    snmpObject_type_;

    static const snmpObject_type_ snmpObject;

    // snmpObjectType
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    snmpObjectType_type_;

    static const snmpObjectType_type_ snmpObjectType;

    // monitorHistory
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    monitorHistory_type_;

    static const monitorHistory_type_ monitorHistory;
  };

  template <typename A>
  const typename pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::snmpObjectValueId_type_
  pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::
  snmpObjectValueId (A::table_name, "`snmpObjectValueId`", 0);

  template <typename A>
  const typename pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::value_type_
  pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::
  value (A::table_name, "`value`", 0);

  template <typename A>
  const typename pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::snmpObject_type_
  pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::
  snmpObject (A::table_name, "`snmpObject`", 0);

  template <typename A>
  const typename pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::snmpObjectType_type_
  pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::
  snmpObjectType (A::table_name, "`snmpObjectType`", 0);

  template <typename A>
  const typename pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::monitorHistory_type_
  pointer_query_columns< ::SnmpObjectValue, id_mysql, A >::
  monitorHistory (A::table_name, "`monitorHistory`", 0);

  template <>
  class access::object_traits_impl< ::SnmpObjectValue, id_mysql >:
    public access::object_traits< ::SnmpObjectValue >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // snmpObjectValueId_
      //
      unsigned long long snmpObjectValueId_value;
      my_bool snmpObjectValueId_null;

      // value_
      //
      details::buffer value_value;
      unsigned long value_size;
      my_bool value_null;

      // snmpObject_
      //
      unsigned long long snmpObject_value;
      my_bool snmpObject_null;

      // snmpObjectType_
      //
      unsigned long long snmpObjectType_value;
      my_bool snmpObjectType_null;

      // monitorHistory_
      //
      unsigned long long monitorHistory_value;
      my_bool monitorHistory_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct snmpObject_tag;
    struct snmpObjectType_tag;
    struct monitorHistory_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::SnmpObjectValue, id_common >:
    public access::object_traits_impl< ::SnmpObjectValue, id_mysql >
  {
  };

  // SnmpObjectValue
  //
  template <>
  struct alias_traits<
    ::SnmpObject,
    id_mysql,
    access::object_traits_impl< ::SnmpObjectValue, id_mysql >::snmpObject_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::SnmpObjectType,
    id_mysql,
    access::object_traits_impl< ::SnmpObjectValue, id_mysql >::snmpObjectType_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::MonitorHistory,
    id_mysql,
    access::object_traits_impl< ::SnmpObjectValue, id_mysql >::monitorHistory_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::SnmpObjectValue, id_mysql >
  {
    // snmpObject
    //
    typedef
    odb::alias_traits<
      ::SnmpObject,
      id_mysql,
      access::object_traits_impl< ::SnmpObjectValue, id_mysql >::snmpObject_tag>
    snmpObject_alias_;

    // snmpObjectType
    //
    typedef
    odb::alias_traits<
      ::SnmpObjectType,
      id_mysql,
      access::object_traits_impl< ::SnmpObjectValue, id_mysql >::snmpObjectType_tag>
    snmpObjectType_alias_;

    // monitorHistory
    //
    typedef
    odb::alias_traits<
      ::MonitorHistory,
      id_mysql,
      access::object_traits_impl< ::SnmpObjectValue, id_mysql >::monitorHistory_tag>
    monitorHistory_alias_;
  };

  template <typename A>
  struct query_columns< ::SnmpObjectValue, id_mysql, A >:
    query_columns_base< ::SnmpObjectValue, id_mysql >
  {
    // snmpObjectValueId
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    snmpObjectValueId_type_;

    static const snmpObjectValueId_type_ snmpObjectValueId;

    // value
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    value_type_;

    static const value_type_ value;

    // snmpObject
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    snmpObject_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::SnmpObject,
        id_mysql,
        snmpObject_alias_ > >
    snmpObject_pointer_type_;

    struct snmpObject_type_: snmpObject_pointer_type_, snmpObject_column_type_
    {
      snmpObject_type_ (const char* t, const char* c, const char* conv)
        : snmpObject_column_type_ (t, c, conv)
      {
      }
    };

    static const snmpObject_type_ snmpObject;

    // snmpObjectType
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    snmpObjectType_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::SnmpObjectType,
        id_mysql,
        snmpObjectType_alias_ > >
    snmpObjectType_pointer_type_;

    struct snmpObjectType_type_: snmpObjectType_pointer_type_, snmpObjectType_column_type_
    {
      snmpObjectType_type_ (const char* t, const char* c, const char* conv)
        : snmpObjectType_column_type_ (t, c, conv)
      {
      }
    };

    static const snmpObjectType_type_ snmpObjectType;

    // monitorHistory
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    monitorHistory_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::MonitorHistory,
        id_mysql,
        monitorHistory_alias_ > >
    monitorHistory_pointer_type_;

    struct monitorHistory_type_: monitorHistory_pointer_type_, monitorHistory_column_type_
    {
      monitorHistory_type_ (const char* t, const char* c, const char* conv)
        : monitorHistory_column_type_ (t, c, conv)
      {
      }
    };

    static const monitorHistory_type_ monitorHistory;
  };

  template <typename A>
  const typename query_columns< ::SnmpObjectValue, id_mysql, A >::snmpObjectValueId_type_
  query_columns< ::SnmpObjectValue, id_mysql, A >::
  snmpObjectValueId (A::table_name, "`snmpObjectValueId`", 0);

  template <typename A>
  const typename query_columns< ::SnmpObjectValue, id_mysql, A >::value_type_
  query_columns< ::SnmpObjectValue, id_mysql, A >::
  value (A::table_name, "`value`", 0);

  template <typename A>
  const typename query_columns< ::SnmpObjectValue, id_mysql, A >::snmpObject_type_
  query_columns< ::SnmpObjectValue, id_mysql, A >::
  snmpObject (A::table_name, "`snmpObject`", 0);

  template <typename A>
  const typename query_columns< ::SnmpObjectValue, id_mysql, A >::snmpObjectType_type_
  query_columns< ::SnmpObjectValue, id_mysql, A >::
  snmpObjectType (A::table_name, "`snmpObjectType`", 0);

  template <typename A>
  const typename query_columns< ::SnmpObjectValue, id_mysql, A >::monitorHistory_type_
  query_columns< ::SnmpObjectValue, id_mysql, A >::
  monitorHistory (A::table_name, "`monitorHistory`", 0);
}

#include "SnmpObjectValue_odb_inline.h"

#include <odb/post.hxx>

#endif // SNMP_OBJECT_VALUE_ODB_H
